#!/usr/bin/python3.5
# coding: utf-8
#########################################################################################
#   Clever Net Systems [~]                                                     		#
#   Clément Hampaï <clement.hampai@clevernetsystems.com>                       		#
#   Centreon check_soap plugin					               		#
#											#
#	This program is free software: you can redistribute it and/or modify	   	#
#	    it under the terms of the GNU General Public License as published by   	#
#	    the Free Software Foundation, either version 3 of the License, or	   	#
#	    (at your option) any later version. 					#
#											#
#	    This program is distributed in the hope that it will be useful,		#
#	    but WITHOUT ANY WARRANTY; without even the implied warranty of		#
#	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		#
#	    GNU General Public License for more details. 				#
# 											#
#	    You should have received a copy of the GNU General Public License 	   	#
#	    along with this program.  If not, see <http://www.gnu.org/licenses/>.  	#
#########################################################################################
import requests, argparse, time, sys

start_time = float()
end_time = float()

# Args management --------------------------------------------------------------
def handle_args():
	parser = argparse.ArgumentParser(description='[~] check_soap Centreon plugin')
	parser.add_argument('--url', help='url of the soap service',required=True)
	parser.add_argument('--data', help='xml data to post to the soap service',required=True)
	parser.add_argument('--success', help='string to match in the service answer for a valide query',required=True)
	parser.add_argument('--srv-cert', help='path to a CA_BUNDLE file or directory with certificates of trusted CAs',required=False)
	parser.add_argument('--client-cert', help='local cert for client side certificate',required=False)
	parser.add_argument('--client-cert-key', help='specify a local cert key for client side certificate',required=False)
	parser.add_argument('--warning', help='exec time in [ms] for warning tresholds',required=True)
	parser.add_argument('--critical', help='exec time in [ms] for critical tresholds',required=True)
	args = parser.parse_args()
	return args
#-------------------------------------------------------------------------------

# HTTP query -------------------------------------------------------------------
def post_query(args):
	global end_time
	try:
		url=args.url
		headers = {'content-type': 'text/xml'}
		body = args.data
		if hasattr(args, 'srv-cert') and hasattr(args, 'client-cert') and hasattr(args, 'client-cert-key'):
			start_time = time.time()
			response = requests.post(url,data=body,headers=headers, cert=(args.client-cert, args.client-cert-key), verify=args.srv-cert)
			end_time = (time.time() - start_time)
		elif hasattr(args, 'client-cert') and hasattr(args, 'client-cert-key'):
			start_time = time.time()
			response = requests.post(url,data=body,headers=headers, cert=(args.client-cert, args.client-cert-key))
			end_time = (time.time() - start_time)
		elif hasattr(args, 'srv-cert'):
			start_time = time.time()
			response = requests.post(url,data=body,headers=headers, verify=args.srv-cert)
			end_time = (time.time() - start_time)
		else:
			start_time = time.time()
			response = requests.post(url,data=body,headers=headers)
			end_time = (time.time() - start_time)
		return response
	except:
		print ("SOAP error - bad service url or query|"+display_graph(0, args, 0))
		sys.exit(3)
#-------------------------------------------------------------------------------

# Arrange http query result ----------------------------------------------------
def check_result(args, response, time):
	exectime = round(time,3)
	if args.success in response.text and response.status_code == 200 and float(time) < float(args.warning) and float(time) < float(args.critical):
		print (display_info("OK", exectime)+"|"+display_graph(exectime, args, 1))
		sys.exit(0)
	elif args.success in response.text and response.status_code == 200 and float(time) > float(args.critical):
		print (display_info("critical", exectime)+"|"+display_graph(exectime, args, 0))
		sys.exit(2)
	elif args.success in response.text and response.status_code == 200 and float(time) > float(args.warning):
		print (display_info("warning", exectime)+"|"+display_graph(exectime, args, 0))
		sys.exit(1)
	else:
		print ("SOAP critical - bad service answer|"+display_graph(exectime, args, 0))
		sys.exit(2)

def display_info(result_type, exectime):
	return "SOAP "+str(result_type)+" - exec time "+str(exectime)+"[s]"

def display_graph(exectime, args, ok):
	return "time="+str(exectime)+"sec;"+str(args.warning)+";"+str(args.critical)+"; ok="+str(ok)
#-------------------------------------------------------------------------------

# MAIN -------------------------------------------------------------------------
args = handle_args()
rep = post_query(args)
check_result(args, rep, end_time)
# ------------------------------------------------------------------------------
